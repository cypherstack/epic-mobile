/*
 * This file is part of Stack Wallet.
 *
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:async';

import 'package:epicpay/db/isar/isar_db.dart';
import 'package:epicpay/models/exchange/incomplete_exchange.dart';
import 'package:epicpay/models/isar/models/exchange/pair.dart';
import 'package:epicpay/models/isar/models/exchange/trade.dart';
import 'package:epicpay/pages/exchange_view/exchange_step_views/step_4_view.dart';
import 'package:epicpay/providers/exchange/exchange_form_state_provider.dart';
import 'package:epicpay/services/swap/exchange_response.dart';
import 'package:epicpay/utilities/clipboard_interface.dart';
import 'package:epicpay/utilities/text_styles.dart';
import 'package:epicpay/utilities/theme/stack_colors.dart';
import 'package:epicpay/widgets/background.dart';
import 'package:epicpay/widgets/custom_buttons/app_bar_icon_button.dart';
import 'package:epicpay/widgets/custom_loading_overlay.dart';
import 'package:epicpay/widgets/ep_dialog.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

class Step3View extends ConsumerStatefulWidget {
  const Step3View({
    Key? key,
    required this.model,
    this.clipboard = const ClipboardWrapper(),
  }) : super(key: key);

  static const String routeName = "/exchangeStep3";

  final IncompleteExchangeModel model;
  final ClipboardInterface clipboard;

  @override
  ConsumerState<Step3View> createState() => _Step3ViewState();
}

class _Step3ViewState extends ConsumerState<Step3View> {
  late final IncompleteExchangeModel model;
  late final ClipboardInterface clipboard;

  @override
  void initState() {
    model = widget.model;
    clipboard = widget.clipboard;

    super.initState();
  }

  static const supportsRefund = true;

  @override
  Widget build(BuildContext context) {
    // final supportsRefund =
    //     ref.watch(efExchangeProvider).name != MajesticBankExchange.exchangeName;

    return Background(
      child: Scaffold(
        backgroundColor: Theme.of(context).extension<StackColors>()!.background,
        appBar: AppBar(
          leading: AppBarBackButton(
            onPressed: () async {
              if (FocusScope.of(context).hasFocus) {
                FocusScope.of(context).unfocus();
                await Future<void>.delayed(const Duration(milliseconds: 75));
              }
              if (mounted) {
                Navigator.of(context).pop();
              }
            },
          ),
        ),
        body: LayoutBuilder(
          builder: (context, constraints) {
            final width = MediaQuery.of(context).size.width - 32;
            return Padding(
              padding: const EdgeInsets.all(12),
              child: SingleChildScrollView(
                child: ConstrainedBox(
                  constraints: BoxConstraints(
                    minHeight: constraints.maxHeight - 24,
                  ),
                  child: IntrinsicHeight(
                    child: Padding(
                      padding: const EdgeInsets.all(4),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.stretch,
                        children: [
                          // StepRow(
                          //   count: 4,
                          //   current: 2,
                          //   width: width,
                          // ),
                          const SizedBox(
                            height: 14,
                          ),
                          Center(
                            child: Text(
                              "Confirm exchange details",
                              style: STextStyles.pageTitleH1(context),
                            ),
                          ),
                          const SizedBox(
                            height: 24,
                          ),
                          Row(
                            children: [
                              Text(
                                "TRADE ID",
                                style: STextStyles.itemSubtitle(context),
                              ),
                              const Spacer(),
                              Text(
                                "${model.sendAmount.toString()} ${model.from.ticker.toUpperCase()}",
                                style: STextStyles.itemSubtitle12(context),
                              )
                            ],
                          ),
                          const SizedBox(
                            height: 10,
                          ),
                          const Divider(),
                          const SizedBox(
                            height: 10,
                          ),
                          Row(
                            children: [
                              Text(
                                "YOU SEND",
                                style: STextStyles.itemSubtitle(context),
                              ),
                              const Spacer(),
                              Text(
                                "${model.sendAmount.toString()} ${model.from.ticker.toUpperCase()}",
                                style: STextStyles.itemSubtitle12(context),
                              )
                            ],
                          ),
                          const SizedBox(
                            height: 10,
                          ),
                          const Divider(),
                          const SizedBox(
                            height: 10,
                          ),
                          Row(
                            children: [
                              Text(
                                "YOU RECEIVE",
                                style: STextStyles.itemSubtitle(context),
                              ),
                              const Spacer(),
                              Text(
                                "${model.receiveAmount.toString()} ${model.to.ticker.toUpperCase()}",
                                style: STextStyles.itemSubtitle12(context),
                              )
                            ],
                          ),
                          const SizedBox(
                            height: 10,
                          ),
                          const Divider(),
                          const SizedBox(
                            height: 10,
                          ),
                          Row(
                            children: [
                              Text(
                                "ESTIMATED RATE",
                                style: STextStyles.itemSubtitle(context),
                              ),
                              const Spacer(),
                              Text(
                                model.rateInfo,
                                style: STextStyles.itemSubtitle12(context),
                              )
                            ],
                          ),
                          const SizedBox(
                            height: 10,
                          ),
                          const Divider(),
                          const SizedBox(
                            height: 10,
                          ),
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                "Recipient ${model.to.ticker.toUpperCase()} address",
                                style: STextStyles.itemSubtitle(context),
                              ),
                              const SizedBox(
                                height: 4,
                              ),
                              Text(
                                model.recipientAddress!,
                                style: STextStyles.itemSubtitle12(context),
                              )
                            ],
                          ),
                          if (supportsRefund)
                            const SizedBox(
                              height: 10,
                            ),
                          const Divider(),
                          const SizedBox(
                            height: 10,
                          ),
                          if (supportsRefund)
                            Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  "Refund ${model.from.ticker.toUpperCase()} address",
                                  style: STextStyles.itemSubtitle(context),
                                ),
                                const SizedBox(
                                  height: 4,
                                ),
                                Text(
                                  model.refundAddress!,
                                  style: STextStyles.itemSubtitle12(context),
                                )
                              ],
                            ),
                          const SizedBox(
                            height: 8,
                          ),
                          const Spacer(),
                          Row(
                            children: [
                              Expanded(
                                child: TextButton(
                                  onPressed: () async {
                                    unawaited(
                                      showDialog<void>(
                                        context: context,
                                        barrierDismissible: false,
                                        builder: (_) => WillPopScope(
                                          onWillPop: () async => false,
                                          child: Container(
                                            color: Theme.of(context)
                                                .extension<StackColors>()!
                                                .overlay
                                                .withOpacity(0.6),
                                            child: const CustomLoadingOverlay(
                                              message: "Creating a trade",
                                              eventBus: null,
                                            ),
                                          ),
                                        ),
                                      ),
                                    );

                                    final ExchangeResponse<Trade> response =
                                        await ref
                                            .read(efExchangeProvider)
                                            .createTrade(
                                              from: model.from,
                                              to: model.to,
                                              fixedRate: model.rateType !=
                                                  SupportedRateType.estimated,
                                              amount: model.reversed
                                                  ? model.receiveAmount
                                                  : model.sendAmount,
                                              addressTo:
                                                  model.recipientAddress!,
                                              extraId: null,
                                              addressRefund: supportsRefund
                                                  ? model.refundAddress!
                                                  : "",
                                              refundExtraId: "",
                                              estimate: model.estimate,
                                              reversed: model.reversed,
                                            );

                                    if (response.value == null) {
                                      if (mounted) {
                                        Navigator.of(context).pop();

                                        unawaited(
                                          showDialog<void>(
                                            context: context,
                                            barrierDismissible: true,
                                            builder: (_) => EPDialog(
                                              title: "Failed to create trade",
                                              info: response.exception
                                                  ?.toString(),
                                            ),
                                          ),
                                        );
                                      }
                                      return;
                                    }

                                    // save trade to hive
                                    await ref
                                        .read(pIsarDB)
                                        .isar
                                        .writeTxn(() async {
                                      await ref
                                          .read(pIsarDB)
                                          .isar
                                          .trades
                                          .put(response.value!);
                                    });

                                    String status = response.value!.status;

                                    model.trade = response.value!;

                                    // extra info if status is waiting
                                    if (status == "Waiting") {
                                      status += " for deposit";
                                    }

                                    if (mounted) {
                                      Navigator.of(context).pop();
                                    }

                                    // unawaited(NotificationApi.showNotification(
                                    //   changeNowId: model.trade!.tradeId,
                                    //   title: status,
                                    //   body: "Trade ID ${model.trade!.tradeId}",
                                    //   walletId: "",
                                    //   iconAssetName: Assets.svg.arrowRotate,
                                    //   date: model.trade!.timestamp,
                                    //   shouldWatchForUpdates: true,
                                    //   coinName: "coinName",
                                    // ));

                                    if (mounted) {
                                      unawaited(
                                        Navigator.of(context).pushNamed(
                                          Step4View.routeName,
                                          arguments: model,
                                        ),
                                      );
                                    }
                                  },
                                  style: Theme.of(context)
                                      .extension<StackColors>()!
                                      .getPrimaryEnabledButtonColor(context),
                                  child: Text(
                                    "Next",
                                    style: STextStyles.buttonText(context)
                                        .copyWith(
                                      color: Theme.of(context)
                                          .extension<StackColors>()!
                                          .overlay,
                                    ),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              ),
            );
          },
        ),
      ),
    );
  }
}

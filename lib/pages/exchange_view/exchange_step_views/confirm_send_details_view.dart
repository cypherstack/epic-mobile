/*
 * This file is part of Stack Wallet.
 *
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:async';

import 'package:decimal/decimal.dart';
import 'package:epicpay/models/exchange/incomplete_exchange.dart';
import 'package:epicpay/models/trade_wallet_lookup.dart';
import 'package:epicpay/pages/exchange_view/exchange_step_views/step_4_view.dart';
import 'package:epicpay/pages/home_view/home_view.dart';
import 'package:epicpay/pages/pinpad_views/lock_screen_view.dart';
import 'package:epicpay/pages/send_view/send_amount_view.dart';
import 'package:epicpay/pages/wallet_view/sub_widgets/wallet_summary_info.dart';
import 'package:epicpay/providers/providers.dart';
import 'package:epicpay/providers/ui/preview_tx_button_state_provider.dart';
import 'package:epicpay/route_generator.dart';
import 'package:epicpay/services/swap/trade_sent_from_stack_service.dart';
import 'package:epicpay/utilities/clipboard_interface.dart';
import 'package:epicpay/utilities/constants.dart';
import 'package:epicpay/utilities/format.dart';
import 'package:epicpay/utilities/text_styles.dart';
import 'package:epicpay/utilities/theme/stack_colors.dart';
import 'package:epicpay/widgets/animated_text.dart';
import 'package:epicpay/widgets/background.dart';
import 'package:epicpay/widgets/custom_buttons/app_bar_icon_button.dart';
import 'package:epicpay/widgets/desktop/custom_text_button.dart';
import 'package:epicpay/widgets/ep_dialog.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:uuid/uuid.dart';

class ConfirmSendDetails extends ConsumerStatefulWidget {
  const ConfirmSendDetails({
    Key? key,
    required this.model,
    this.clipboard = const ClipboardWrapper(),
  }) : super(key: key);

  static const String routeName = "/confirmSendDetails";

  final IncompleteExchangeModel model;
  final ClipboardInterface clipboard;

  @override
  ConsumerState<ConfirmSendDetails> createState() => _ConfirmSendDetailsState();
}

class _ConfirmSendDetailsState extends ConsumerState<ConfirmSendDetails> {
  static const double maxDivHeight = 45;
  static const double minDivHeight = 3;
  final _key = GlobalKey();

  late final IncompleteExchangeModel model;
  late final ClipboardInterface clipboard;

  Decimal? _amountToSend;
  String? feeErr;
  Map<int, Decimal> cachedFees = {};

  SendingState sendingState = SendingState.waiting;

  late final int divCount;
  double divHeight = minDivHeight;
  double? layoutBuilderHeight;
  double? screenDiff;
  Size? size;

  String get noteString => "${model.trade!.fromCurrency.toUpperCase()}"
      "/${model.trade!.toCurrency.toUpperCase()} exchange";

  double _getInRange(double value) {
    if (value < minDivHeight) {
      return minDivHeight;
    } else if (value > maxDivHeight) {
      return maxDivHeight;
    } else {
      return value;
    }
  }

  Widget getButtonChild(
    BuildContext context,
    bool enabled,
    SendingState state,
  ) {
    final style = STextStyles.buttonText(context).copyWith(
      color: enabled
          ? Theme.of(context).extension<StackColors>()!.buttonTextPrimary
          : Theme.of(context)
              .extension<StackColors>()!
              .buttonTextPrimaryDisabled,
    );

    switch (state) {
      case SendingState.waiting:
        return Text(
          "SEND",
          style: style,
        );
      case SendingState.generating:
        return AnimatedText(
          stringsToLoopThrough: const [
            "GENERATING",
            "GENERATING.",
            "GENERATING..",
            "GENERATING...",
          ],
          style: style,
        );
      case SendingState.sending:
        return AnimatedText(
          stringsToLoopThrough: const [
            "SENDING",
            "SENDING.",
            "SENDING..",
            "SENDING...",
          ],
          style: style,
        );
      case SendingState.sent:
        return Text(
          "SENT",
          style: style,
        );
    }
  }

  void _updatePreviewButtonState(
      String? address, Decimal? amount, String? feeErr) {
    final isValidAddress =
        ref.read(walletProvider)!.validateAddress(address ?? "");
    ref.read(previewTxButtonStateProvider.state).state = (isValidAddress &&
            amount != null &&
            amount > Decimal.zero &&
            amount <= ref.read(walletProvider)!.cachedAvailableBalance) &&
        feeErr == null;
  }

  Future<Decimal> calculateFees(int amount) async {
    if (amount <= 0) {
      return Decimal.zero;
    }

    if (cachedFees[amount] != null) {
      return cachedFees[amount]!;
    }

    final manager = ref.read(walletProvider)!;

    final fee = await manager.estimateFeeFor(amount, 1);
    cachedFees[amount] = Format.satoshisToAmount(fee);

    return cachedFees[amount]!;
  }

  Future<void> availableBalance() async {
    unawaited(
      showDialog(
          context: context,
          builder: (context) {
            return Dialog(
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(
                    Constants.size.circularBorderRadius * 2),
              ),
              backgroundColor:
                  Theme.of(context).extension<StackColors>()!.popupBG,
              child: Container(
                height: 240,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(
                      Constants.size.circularBorderRadius * 2),
                ),
                child: Padding(
                  padding: const EdgeInsets.symmetric(vertical: 10),
                  child: Column(
                    children: [
                      const Row(
                        mainAxisAlignment: MainAxisAlignment.start,
                        children: [
                          AppBarBackButton(),
                        ],
                      ),
                      Text(
                        "Available Balance",
                        style: STextStyles.titleH3(context).copyWith(
                          fontSize: 18,
                          color: Theme.of(context)
                              .extension<StackColors>()!
                              .textMedium,
                        ),
                      ),
                      const SizedBox(
                        height: 10,
                      ),
                      Text(
                        "YOU CAN SPEND",
                        style: STextStyles.overLineBold(context).copyWith(
                          color: Theme.of(context)
                              .extension<StackColors>()!
                              .textDark,
                        ),
                      ),
                      const SizedBox(
                        height: 6,
                      ),
                      WalletSummaryInfo(
                        walletId: ref.read(walletProvider)!.walletId,
                        isSendView: true,
                      ),
                    ],
                  ),
                ),
              ),
            );
          }),
    );
  }

  Future<void> _close() async {
    if (FocusScope.of(context).hasFocus) {
      FocusScope.of(context).unfocus();
      await Future<void>.delayed(const Duration(milliseconds: 75));
    }
    if (mounted) {
      // ref.read(homeViewPageIndexStateProvider.notifier).state = 0;
      Navigator.of(context).popUntil(
        ModalRoute.withName(
          HomeView.routeName,
        ),
      );
    }
  }

  void send() async {
    // ignore if currently sending
    if (sendingState != SendingState.waiting) {
      return;
    }

    // unlock
    final unlocked = await Navigator.push(
      context,
      RouteGenerator.getRoute(
        shouldUseMaterialRoute: RouteGenerator.useMaterialPageRoute,
        builder: (_) => const LockscreenView(
          showBackButton: true,
          popOnSuccess: true,
          routeOnSuccessArguments: true,
          routeOnSuccess: "",
          biometricsCancelButtonString: "CANCEL",
          biometricsLocalizedReason: "Authenticate to send transaction",
          biometricsAuthenticationTitle: "Confirm Transaction",
        ),
        settings: const RouteSettings(name: "/confirmsendlockscreen"),
      ),
    );

    // failed to authenticate
    if (!(unlocked is bool && unlocked && mounted)) {
      return;
    }

    setState(() {
      sendingState = SendingState.generating;
    });

    final amount = Format.decimalAmountToSatoshis(_amountToSend!);

    try {
      Map<String, dynamic> txData = await ref.read(walletProvider)!.prepareSend(
        address: model.trade!.payinAddress,
        satoshiAmount: amount,
        args: {"feeRate": 1},
      );

      setState(() {
        sendingState = SendingState.sending;
      });

      txData["note"] = noteString;
      txData["address"] = model.trade!.payinAddress;

      final txid = await ref.read(walletProvider)!.confirmSend(txData: txData);

      unawaited(
        ref.read(walletProvider)!.refresh(),
      );

      // save note
      await ref
          .read(notesServiceChangeNotifierProvider(
              ref.read(walletProvider)!.walletId))
          .editOrAddNote(
            txid: txid,
            note: noteString,
          );

      // set trade sent from wallet status
      await ref.read(tradeSentFromStackLookupProvider).save(
            tradeWalletLookup: TradeWalletLookup(
              uuid: const Uuid().v1(),
              txid: txid,
              tradeId: model.trade!.tradeId,
              walletIds: [
                ref.read(walletProvider)!.walletId,
              ],
            ),
          );

      setState(() {
        sendingState = SendingState.sent;
      });

      await Future<void>.delayed(const Duration(seconds: 2));

      if (mounted) {
        Navigator.of(context).popUntil(
          ModalRoute.withName(
            HomeView.routeName,
          ),
        );
      }
      sendingState = SendingState.waiting;
    } catch (e) {
      if (mounted) {
        setState(() {
          sendingState = SendingState.waiting;
        });
        unawaited(
          showDialog<dynamic>(
            context: context,
            useSafeArea: false,
            barrierDismissible: true,
            builder: (context) {
              return EPDialog(
                title: "Transaction failed",
                info: e.toString(),
                confirmButtonTitle: "OK",
                onConfirmPressed: () {
                  Navigator.of(context).pop();
                },
              );
            },
          ),
        );
      }
    }
  }

  void _setSize() {
    WidgetsBinding.instance.addPostFrameCallback((timeStamp) async {
      size = _key.currentContext?.size;

      if (layoutBuilderHeight != null && size != null) {
        if (layoutBuilderHeight! < size!.height) {
          final diff = size!.height - layoutBuilderHeight!;
          final dDiff = diff / divCount;
          divHeight = _getInRange(divHeight - dDiff);
        } else {
          final diff = layoutBuilderHeight! - size!.height;
          final dDiff = diff / divCount;
          final clampInput = divHeight + dDiff;
          divHeight = _getInRange(clampInput);
          screenDiff = clampInput - divHeight;
          screenDiff = screenDiff! * divCount;
        }
      }

      setState(() {});
    });
  }

  @override
  void initState() {
    model = widget.model;
    clipboard = widget.clipboard;
    _amountToSend = model.sendAmount;
    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {
      _updatePreviewButtonState(
        model.trade!.payinAddress,
        _amountToSend,
        feeErr,
      );
    });

    divCount = 7;

    _setSize();

    super.initState();
  }

  @override
  void dispose() {
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final scaleFactor = (MediaQuery.of(context).textScaleFactor) * 0.85;

    return WillPopScope(
      onWillPop: () async {
        await _close();
        return false;
      },
      child: Background(
        child: Scaffold(
          backgroundColor:
              Theme.of(context).extension<StackColors>()!.background,
          appBar: AppBar(
            leading: AppBarBackButton(
              onPressed: () async {
                if (FocusScope.of(context).hasFocus) {
                  FocusScope.of(context).unfocus();
                  await Future<void>.delayed(const Duration(milliseconds: 75));
                }
                if (mounted) {
                  Navigator.of(context).pop();
                }
              },
            ),
            centerTitle: true,
            title: Text(
              "Confirm send details",
              style: STextStyles.pageTitleH1(context),
            ),
          ),
          body: SafeArea(
            child: MediaQuery(
              data: MediaQuery.of(context).copyWith(
                textScaleFactor: scaleFactor,
              ),
              child: Column(
                children: [
                  Expanded(
                    child: LayoutBuilder(
                      builder: (context, constraints) {
                        layoutBuilderHeight = constraints.maxHeight;
                        return SingleChildScrollView(
                          child: IntrinsicHeight(
                            key: _key,
                            child: Padding(
                              padding: const EdgeInsets.symmetric(
                                horizontal: 16,
                              ),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.stretch,
                                children: [
                                  const SizedBox(
                                    height: 12,
                                  ),
                                  StepListItem(
                                    vertical: true,
                                    title: "CHANGENOW ADDRESS",
                                    info: model.trade!.payinAddress,
                                  ),
                                  _Divider(
                                    height: divHeight,
                                  ),
                                  StepListItem(
                                    title: "TRADE ID",
                                    info: model.trade!.tradeId,
                                  ),
                                  _Divider(
                                    height: divHeight,
                                  ),
                                  StepListItem(
                                    title: "NOTE",
                                    info: noteString,
                                  ),
                                  _Divider(
                                    height: divHeight,
                                  ),
                                  StepListItem(
                                    title: "AMOUNT TO SEND",
                                    info: "${model.sendAmount} EPIC",
                                  ),
                                  SizedBox(
                                    height: divHeight,
                                  ),
                                  Row(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: [
                                      TextButton(
                                        onPressed: availableBalance,
                                        style: Theme.of(context)
                                            .extension<StackColors>()!
                                            .getPrimaryDisabledButtonColor(
                                                context),
                                        child: Padding(
                                          padding: const EdgeInsets.symmetric(
                                              horizontal: 16),
                                          child: Text(
                                            "VIEW AVAILABLE BALANCE",
                                            textAlign: TextAlign.center,
                                            style: STextStyles.overLineBold(
                                                    context)
                                                .copyWith(
                                              color: Theme.of(context)
                                                  .extension<StackColors>()!
                                                  .buttonBackPrimary,
                                            ),
                                          ),
                                        ),
                                      ),
                                    ],
                                  ),
                                  SizedBox(
                                    height: divHeight,
                                  ),
                                  Column(
                                    children: [
                                      Center(
                                        child: Text(
                                          "NETWORK FEE",
                                          style:
                                              STextStyles.overLineBold(context),
                                          textAlign: TextAlign.center,
                                        ),
                                      ),
                                      FutureBuilder(
                                        future: calculateFees(
                                            Format.decimalAmountToSatoshis(
                                                _amountToSend!)),
                                        builder: (context,
                                            AsyncSnapshot<Decimal> snapshot) {
                                          if (snapshot.connectionState ==
                                                  ConnectionState.done &&
                                              snapshot.hasData) {
                                            final feeAmount = snapshot.data!;

                                            if (_amountToSend ==
                                                ref
                                                    .read(walletProvider)!
                                                    .cachedAvailableBalance) {
                                              _amountToSend = ref
                                                      .read(walletProvider)!
                                                      .cachedAvailableBalance -
                                                  feeAmount;
                                            }

                                            final total = feeAmount +
                                                (_amountToSend ?? Decimal.zero);

                                            if (total >
                                                ref
                                                    .read(walletProvider)!
                                                    .cachedAvailableBalance) {
                                              feeErr = "Not enough balance";
                                              WidgetsBinding.instance
                                                  .addPostFrameCallback((_) {
                                                _updatePreviewButtonState(
                                                  model.trade!.payinAddress,
                                                  _amountToSend,
                                                  feeErr,
                                                );
                                              });
                                            } else {
                                              feeErr = null;
                                              WidgetsBinding.instance
                                                  .addPostFrameCallback((_) {
                                                _updatePreviewButtonState(
                                                  model.trade!.payinAddress,
                                                  _amountToSend,
                                                  feeErr,
                                                );
                                              });
                                            }

                                            return Column(
                                              children: [
                                                Text(
                                                  feeErr ?? "~$feeAmount EPIC",
                                                  textAlign: TextAlign.center,
                                                  style:
                                                      STextStyles.body(context),
                                                ),
                                                SizedBox(
                                                  height: divHeight,
                                                ),
                                                Center(
                                                  child: Text(
                                                    "TOTAL AMOUNT TO SEND (INCLUDING FEE)",
                                                    style: STextStyles
                                                            .overLineBold(
                                                                context)
                                                        .copyWith(
                                                      color: Theme.of(context)
                                                          .extension<
                                                              StackColors>()!
                                                          .textMedium,
                                                    ),
                                                  ),
                                                ),
                                                const SizedBox(
                                                  height: 6,
                                                ),
                                                Text(
                                                  feeErr ?? "~$total EPIC",
                                                  textAlign: TextAlign.center,
                                                  style: STextStyles.titleH2(
                                                          context)
                                                      .copyWith(
                                                    color: Theme.of(context)
                                                        .extension<
                                                            StackColors>()!
                                                        .buttonBackPrimary,
                                                  ),
                                                )
                                              ],
                                            );
                                          } else {
                                            return Column(
                                              children: [
                                                Center(
                                                  child: AnimatedText(
                                                    stringsToLoopThrough: const [
                                                      "Calculating",
                                                      "Calculating.",
                                                      "Calculating..",
                                                      "Calculating...",
                                                    ],
                                                    style: STextStyles.body(
                                                        context),
                                                  ),
                                                ),
                                                SizedBox(
                                                  height: divHeight,
                                                ),
                                                Center(
                                                  child: Text(
                                                    "TOTAL AMOUNT TO SEND (INCLUDING FEE)",
                                                    style: STextStyles
                                                            .overLineBold(
                                                                context)
                                                        .copyWith(
                                                      color: Theme.of(context)
                                                          .extension<
                                                              StackColors>()!
                                                          .textMedium,
                                                    ),
                                                  ),
                                                ),
                                                const SizedBox(
                                                  height: 6,
                                                ),
                                                Center(
                                                  child: AnimatedText(
                                                    stringsToLoopThrough: const [
                                                      "Calculating",
                                                      "Calculating.",
                                                      "Calculating..",
                                                      "Calculating...",
                                                    ],
                                                    style: STextStyles.titleH2(
                                                            context)
                                                        .copyWith(
                                                      color: Theme.of(context)
                                                          .extension<
                                                              StackColors>()!
                                                          .buttonBackPrimary,
                                                    ),
                                                  ),
                                                ),
                                              ],
                                            );
                                          }
                                        },
                                      ),
                                    ],
                                  ),
                                  SizedBox(
                                    height:
                                        screenDiff != null && screenDiff! > 0
                                            ? screenDiff! + divHeight
                                            : divHeight,
                                  ),
                                  CustomTextButtonBase(
                                    height: 56,
                                    textButton: TextButton(
                                      onPressed: ref
                                              .watch(
                                                  previewTxButtonStateProvider
                                                      .state)
                                              .state
                                          ? send
                                          : null,
                                      style: ref
                                              .watch(
                                                  previewTxButtonStateProvider
                                                      .state)
                                              .state
                                          ? Theme.of(context)
                                              .extension<StackColors>()!
                                              .getPrimaryEnabledButtonColor(
                                                  context)
                                          : Theme.of(context)
                                              .extension<StackColors>()!
                                              .getPrimaryDisabledButtonColor(
                                                  context),
                                      child: Row(
                                        mainAxisAlignment:
                                            MainAxisAlignment.center,
                                        children: [
                                          getButtonChild(
                                            context,
                                            ref
                                                .watch(
                                                    previewTxButtonStateProvider
                                                        .state)
                                                .state,
                                            sendingState,
                                          ),
                                        ],
                                      ),
                                    ),
                                  ),
                                  const SizedBox(
                                    height: 16,
                                  ),
                                ],
                              ),
                            ),
                          ),
                        );
                      },
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}

class _Divider extends StatelessWidget {
  const _Divider({
    Key? key,
    required this.height,
  }) : super(key: key);

  final double height;

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: (height - 1) / 2),
      child: Container(
        height: 1,
        color: Theme.of(context)
            .extension<StackColors>()!
            .buttonBackPrimaryDisabled,
      ),
    );
  }
}

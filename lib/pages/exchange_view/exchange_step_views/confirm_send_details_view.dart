/*
 * This file is part of Stack Wallet.
 *
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:async';

import 'package:decimal/decimal.dart';
import 'package:epicpay/models/exchange/incomplete_exchange.dart';
import 'package:epicpay/pages/home_view/home_view.dart';
import 'package:epicpay/providers/providers.dart';
import 'package:epicpay/providers/ui/preview_tx_button_state_provider.dart';
import 'package:epicpay/utilities/amount/amount.dart';
import 'package:epicpay/utilities/clipboard_interface.dart';
import 'package:epicpay/utilities/constants.dart';
import 'package:epicpay/utilities/enums/coin_enum.dart';
import 'package:epicpay/utilities/format.dart';
import 'package:epicpay/utilities/text_styles.dart';
import 'package:epicpay/utilities/theme/stack_colors.dart';
import 'package:epicpay/widgets/animated_text.dart';
import 'package:epicpay/widgets/background.dart';
import 'package:epicpay/widgets/custom_buttons/app_bar_icon_button.dart';
import 'package:epicpay/widgets/ep_dialog.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:tuple/tuple.dart';

class ConfirmSendDetails extends ConsumerStatefulWidget {
  const ConfirmSendDetails({
    Key? key,
    required this.model,
    this.clipboard = const ClipboardWrapper(),
  }) : super(key: key);

  static const String routeName = "/confirmSendDetails";

  final IncompleteExchangeModel model;
  final ClipboardInterface clipboard;

  @override
  ConsumerState<ConfirmSendDetails> createState() => _ConfirmSendDetailsState();
}

class _ConfirmSendDetailsState extends ConsumerState<ConfirmSendDetails> {
  late final IncompleteExchangeModel model;
  late final ClipboardInterface clipboard;
  late final String address;

  final _cryptoFocus = FocusNode();
  final _baseFocus = FocusNode();

  Decimal? _amountToSend;
  String? feeErr;
  late Future<Decimal> _calculateFeesFuture;
  Map<int, Decimal> cachedFees = {};

  Timer? _statusTimer;

  bool _isWalletCoinAndHasWallet(String ticker, WidgetRef ref) {
    try {
      final coin = coinFromTickerCaseInsensitive(ticker);
      return coin == Coin.epicCash;
    } catch (_) {
      return false;
    }
  }

  void _updatePreviewButtonState(
      String? address, Decimal? amount, String? feeErr) {
    final isValidAddress =
        ref.read(walletProvider)!.validateAddress(address ?? "");
    ref.read(previewTxButtonStateProvider.state).state = (isValidAddress &&
            amount != null &&
            amount > Decimal.zero &&
            amount <= ref.read(walletProvider)!.cachedAvailableBalance) &&
        feeErr == null;
  }

  Future<Decimal> calculateFees(int amount) async {
    if (amount <= 0) {
      return Decimal.zero;
    }

    if (cachedFees[amount] != null) {
      return cachedFees[amount]!;
    }

    final manager = ref.read(walletProvider)!;

    final fee = await manager.estimateFeeFor(amount, 1);
    cachedFees[amount] = Format.satoshisToAmount(fee);

    return cachedFees[amount]!;
  }

  @override
  void initState() {
    model = widget.model;
    clipboard = widget.clipboard;
    _calculateFeesFuture = calculateFees(0);

    _cryptoFocus.addListener(() {
      if (!_cryptoFocus.hasFocus && !_baseFocus.hasFocus) {
        if (_amountToSend == null) {
          setState(() {
            _calculateFeesFuture = calculateFees(0);
            // _displayFees = calculateFees(0);
          });
        } else {
          setState(() {
            _calculateFeesFuture =
                calculateFees(Format.decimalAmountToSatoshis(_amountToSend!));
            // _displayFees = calculateNetworkFees(
            //     Format.decimalAmountToSatoshis(_amountToSend!));
          });
        }
      }
    });

    _baseFocus.addListener(() {
      if (!_cryptoFocus.hasFocus && !_baseFocus.hasFocus) {
        if (_amountToSend == null) {
          setState(() {
            _calculateFeesFuture = calculateFees(0);
            // _displayFees = calculateFees(0);
          });
        } else {
          setState(() {
            _calculateFeesFuture =
                calculateFees(Format.decimalAmountToSatoshis(_amountToSend!));
            // _displayFees = calculateNetworkFees(
            //     Format.decimalAmountToSatoshis(_amountToSend!));
          });
        }
      }
    });

    super.initState();
  }

  @override
  void dispose() {
    super.dispose();
  }

  Future<void> availableBalance() async {
    unawaited(
      showDialog(
          context: context,
          builder: (context) {
            return Dialog(
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(
                    Constants.size.circularBorderRadius * 2),
              ),
              backgroundColor:
                  Theme.of(context).extension<StackColors>()!.popupBG,
              child: Container(
                height: 240,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(
                      Constants.size.circularBorderRadius * 2),
                ),
                child: Padding(
                  padding: const EdgeInsets.symmetric(vertical: 10),
                  child: Column(
                    children: [
                      Row(
                        mainAxisAlignment: MainAxisAlignment.start,
                        children: const [
                          AppBarBackButton(),
                        ],
                      ),
                      Text(
                        "Available Balance",
                        style: STextStyles.titleH3(context).copyWith(
                          fontSize: 18,
                          color: Theme.of(context)
                              .extension<StackColors>()!
                              .textMedium,
                        ),
                      ),
                      const SizedBox(
                        height: 10,
                      ),
                      Text(
                        "YOU CAN SPEND",
                        style: STextStyles.overLineBold(context).copyWith(
                          color: Theme.of(context)
                              .extension<StackColors>()!
                              .textDark,
                        ),
                      ),
                      const SizedBox(
                        height: 6,
                      ),
                      // WalletSummaryInfo(
                      //   walletId: walletId,
                      //   isSendView: true,
                      // ),
                    ],
                  ),
                ),
              ),
            );
          }),
    );
  }

  Future<void> _close() async {
    if (FocusScope.of(context).hasFocus) {
      FocusScope.of(context).unfocus();
      await Future<void>.delayed(const Duration(milliseconds: 75));
    }
    if (mounted) {
      // ref.read(homeViewPageIndexStateProvider.notifier).state = 0;
      Navigator.of(context).popUntil(
        ModalRoute.withName(
          HomeView.routeName,
        ),
      );
    }
  }

  Future<void> _confirmSend(Tuple2<String, Coin> tuple) async {
    final bool firoPublicSend;
    // if (tuple.item2 == Coin.firo) {
    //   final result = await _showSendFromFiroBalanceSelectSheet(tuple.item1);
    //   if (result == null) {
    //     return;
    //   } else {
    //     firoPublicSend = result;
    //   }
    // } else {
    firoPublicSend = false;
    // }

    final manager = ref.read(walletProvider)!;

    final Amount amount = model.sendAmount.toAmount(
      fractionDigits: manager.coin.decimals,
    );
    final address = model.trade!.payinAddress;

    bool wasCancelled = false;
    try {
      if (!mounted) return;

      // unawaited(
      //   showDialog<dynamic>(
      //     context: context,
      //     useSafeArea: false,
      //     barrierDismissible: false,
      //     builder: (context) {
      //       return BuildingTransactionDialog(
      //         coin: manager.coin,
      //         onCancel: () {
      //           wasCancelled = true;
      //         },
      //       );
      //     },
      //   ),
      // );

      final time = Future<dynamic>.delayed(
        const Duration(
          milliseconds: 2500,
        ),
      );

      Future<Map<String, dynamic>> txDataFuture = manager.prepareSend(
        address: address,
        satoshiAmount: amount.raw.toInt(),
      );

      final results = await Future.wait([
        txDataFuture,
        time,
      ]);

      final txData = results.first as Map<String, dynamic>;

      if (!wasCancelled) {
        // pop building dialog

        if (mounted) {
          Navigator.of(context).pop();
        }

        txData["note"] =
            "${model.trade!.fromCurrency.toUpperCase()}/${model.trade!.toCurrency.toUpperCase()} exchange";
        txData["address"] = address;

        if (mounted) {
          // unawaited(
          //   Navigator.of(context).push(
          //     RouteGenerator.getRoute(
          //       shouldUseMaterialRoute: RouteGenerator.useMaterialPageRoute,
          //       builder: (_) => ConfirmChangeNowSendView(
          //         transactionInfo: txData,
          //         walletId: tuple.item1,
          //         routeOnSuccessName: HomeView.routeName,
          //         trade: model.trade!,
          //         shouldSendPublicFiroFunds: firoPublicSend,
          //       ),
          //       settings: const RouteSettings(
          //         name: ConfirmChangeNowSendView.routeName,
          //       ),
          //     ),
          //   ),
          // );
        }
      }
    } catch (e) {
      if (mounted && !wasCancelled) {
        // pop building dialog
        Navigator.of(context).pop();

        unawaited(
          showDialog<dynamic>(
            context: context,
            useSafeArea: false,
            barrierDismissible: true,
            builder: (context) {
              return EPDialog(
                title: "Transaction failed",
                info: e.toString(),
                confirmButtonTitle: "OK",
                onConfirmPressed: () {
                  Navigator.of(context).pop();
                },
              );
            },
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final bool isWalletCoin =
        _isWalletCoinAndHasWallet(model.trade!.fromCurrency, ref);
    return WillPopScope(
      onWillPop: () async {
        await _close();
        return false;
      },
      child: Background(
        child: Scaffold(
          backgroundColor:
              Theme.of(context).extension<StackColors>()!.background,
          appBar: AppBar(
            leading: AppBarBackButton(
              onPressed: () async {
                if (FocusScope.of(context).hasFocus) {
                  FocusScope.of(context).unfocus();
                  await Future<void>.delayed(const Duration(milliseconds: 75));
                }
                if (mounted) {
                  Navigator.of(context).pop();
                }
              },
            ),
          ),
          body: LayoutBuilder(
            builder: (context, constraints) {
              final width = MediaQuery.of(context).size.width - 32;
              return Padding(
                padding: const EdgeInsets.all(12),
                child: SingleChildScrollView(
                  child: ConstrainedBox(
                    constraints: BoxConstraints(
                      minHeight: constraints.maxHeight - 24,
                    ),
                    child: IntrinsicHeight(
                      child: Padding(
                        padding: const EdgeInsets.all(4),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.stretch,
                          children: [
                            const SizedBox(
                              height: 12,
                            ),
                            Center(
                              child: Text(
                                "Confirm send details",
                                style: STextStyles.pageTitleH1(context),
                              ),
                            ),
                            const SizedBox(
                              height: 20,
                            ),
                            Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Row(
                                  mainAxisAlignment:
                                      MainAxisAlignment.spaceBetween,
                                  children: [
                                    Text(
                                      "CHANGENOW ADDRESS",
                                      style: STextStyles.itemSubtitle(context),
                                    ),
                                  ],
                                ),
                                const SizedBox(
                                  height: 4,
                                ),
                                GestureDetector(
                                  onTap: () {
                                    clipboard.setData(ClipboardData(
                                      text: model.trade!.payinAddress,
                                    ));
                                  },
                                  child: Text(
                                    model.trade!.payinAddress,
                                    style: STextStyles.itemSubtitle12(context),
                                  ),
                                ),
                              ],
                            ),
                            const SizedBox(
                              height: 10,
                            ),
                            const Divider(),
                            const SizedBox(
                              height: 10,
                            ),
                            Row(
                              children: [
                                Text(
                                  "TRADE ID",
                                  style: STextStyles.itemSubtitle(context),
                                ),
                                const Spacer(),
                                Row(
                                  children: [
                                    GestureDetector(
                                      onTap: () {
                                        clipboard.setData(ClipboardData(
                                          text: model.trade!.tradeId,
                                        ));
                                      },
                                      child: Text(
                                        model.trade!.tradeId,
                                        style:
                                            STextStyles.itemSubtitle12(context),
                                      ),
                                    ),
                                  ],
                                )
                              ],
                            ),
                            const SizedBox(
                              height: 10,
                            ),
                            const Divider(),
                            const SizedBox(
                              height: 10,
                            ),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Text(
                                  "NOTE",
                                  style: STextStyles.itemSubtitle(context),
                                ),
                              ],
                            ),
                            const SizedBox(
                              height: 10,
                            ),
                            const Divider(),
                            const SizedBox(
                              height: 10,
                            ),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Text(
                                  "AMOUNT TO SEND",
                                  style: STextStyles.itemSubtitle(context),
                                ),
                                GestureDetector(
                                  onTap: () async {
                                    final data = ClipboardData(
                                      text: model.sendAmount.toString(),
                                    );
                                    await clipboard.setData(data);
                                    // if (mounted) {
                                    //   unawaited(
                                    //     showFloatingFlushBar(
                                    //       type: FlushBarType.info,
                                    //       message: "Copied to clipboard",
                                    //       context: context,
                                    //     ),
                                    //   );
                                    // }
                                  },
                                  child: Text(
                                    model.sendAmount.toString(),
                                    style: STextStyles.itemSubtitle12(context),
                                  ),
                                ),
                              ],
                            ),
                            SizedBox(
                              height: 32,
                            ),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                TextButton(
                                  onPressed: availableBalance,
                                  style: Theme.of(context)
                                      .extension<StackColors>()!
                                      .getPrimaryDisabledButtonColor(context),
                                  child: Padding(
                                    padding: const EdgeInsets.symmetric(
                                        horizontal: 16),
                                    child: Text(
                                      "VIEW AVAILABLE BALANCE",
                                      textAlign: TextAlign.center,
                                      style: STextStyles.overLineBold(context)
                                          .copyWith(
                                        color: Theme.of(context)
                                            .extension<StackColors>()!
                                            .buttonBackPrimary,
                                      ),
                                    ),
                                  ),
                                ),
                              ],
                            ),
                            SizedBox(
                              height: 18,
                            ),
                            Column(
                              children: [
                                Center(
                                  child: Text(
                                    "NETWORK FEE",
                                    style: STextStyles.overLineBold(context),
                                    textAlign: TextAlign.center,
                                  ),
                                ),
                                FutureBuilder(
                                  future: _calculateFeesFuture,
                                  builder: (context,
                                      AsyncSnapshot<Decimal> snapshot) {
                                    if (snapshot.connectionState ==
                                            ConnectionState.done &&
                                        snapshot.hasData) {
                                      final feeAmount = snapshot.data!;

                                      if (_amountToSend ==
                                          ref
                                              .read(walletProvider)!
                                              .cachedAvailableBalance) {
                                        _amountToSend = ref
                                                .read(walletProvider)!
                                                .cachedAvailableBalance -
                                            feeAmount;
                                      }

                                      final total = feeAmount +
                                          (_amountToSend ?? Decimal.zero);

                                      if (total >
                                          ref
                                              .read(walletProvider)!
                                              .cachedAvailableBalance) {
                                        feeErr = "Not enough balance";
                                        WidgetsBinding.instance
                                            .addPostFrameCallback((_) {
                                          _updatePreviewButtonState(
                                              address, _amountToSend, feeErr);
                                        });
                                      } else {
                                        feeErr = null;
                                        WidgetsBinding.instance
                                            .addPostFrameCallback((_) {
                                          _updatePreviewButtonState(
                                              address, _amountToSend, feeErr);
                                        });
                                      }

                                      return Column(
                                        children: [
                                          Text(
                                            // feeErr ??
                                            //     "~$feeAmount ${model.estimate}",
                                            "",
                                            textAlign: TextAlign.center,
                                            style: STextStyles.body(context),
                                          ),
                                          // SizedBox(
                                          //     height:
                                          //         (layoutBuilderHeight! < 700)
                                          //             ? 10
                                          //             : 36),
                                          SizedBox(
                                            height: 10,
                                          ),
                                          Center(
                                            child: Text(
                                              "TOTAL AMOUNT TO SEND (INCLUDING FEE)",
                                              style: STextStyles.overLineBold(
                                                      context)
                                                  .copyWith(
                                                color: Theme.of(context)
                                                    .extension<StackColors>()!
                                                    .textMedium,
                                              ),
                                            ),
                                          ),
                                          const SizedBox(
                                            height: 6,
                                          ),
                                          Text(
                                            // feeErr ?? "~$total ${coin.ticker}",
                                            "",
                                            textAlign: TextAlign.center,
                                            style: STextStyles.titleH2(context)
                                                .copyWith(
                                              color: Theme.of(context)
                                                  .extension<StackColors>()!
                                                  .buttonBackPrimary,
                                            ),
                                          )
                                        ],
                                      );
                                    } else {
                                      return Column(
                                        children: [
                                          Center(
                                            child: AnimatedText(
                                              stringsToLoopThrough: const [
                                                "Calculating",
                                                "Calculating.",
                                                "Calculating..",
                                                "Calculating...",
                                              ],
                                              style: STextStyles.body(context),
                                            ),
                                          ),
                                          SizedBox(
                                            height: 10,
                                          ),
                                          Center(
                                            child: Text(
                                              "TOTAL AMOUNT TO SEND (INCLUDING FEE)",
                                              style: STextStyles.overLineBold(
                                                      context)
                                                  .copyWith(
                                                color: Theme.of(context)
                                                    .extension<StackColors>()!
                                                    .textMedium,
                                              ),
                                            ),
                                          ),
                                          const SizedBox(
                                            height: 6,
                                          ),
                                          Center(
                                            child: AnimatedText(
                                              stringsToLoopThrough: const [
                                                "Calculating",
                                                "Calculating.",
                                                "Calculating..",
                                                "Calculating...",
                                              ],
                                              style:
                                                  STextStyles.titleH2(context)
                                                      .copyWith(
                                                color: Theme.of(context)
                                                    .extension<StackColors>()!
                                                    .buttonBackPrimary,
                                              ),
                                            ),
                                          ),
                                        ],
                                      );
                                    }
                                  },
                                ),
                              ],
                            ),

                            const Spacer(),
                            // if (isWalletCoin)
                            const SizedBox(
                              height: 12,
                            ),
                            if (isWalletCoin)
                              TextButton(
                                onPressed: () {},
                                style: Theme.of(context)
                                    .extension<StackColors>()!
                                    .getPrimaryEnabledButtonColor(context),
                                child: Text(
                                  "SEND",
                                  style:
                                      STextStyles.buttonText(context).copyWith(
                                    color: Theme.of(context)
                                        .extension<StackColors>()!
                                        .overlay,
                                  ),
                                ),
                              ),
                          ],
                        ),
                      ),
                    ),
                  ),
                ),
              );
            },
          ),
        ),
      ),
    );
  }
}

/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:async';

import 'package:epicpay/providers/global/wallet_provider.dart';
import 'package:epicpay/services/coins/epiccash/epiccash_wallet.dart';
import 'package:epicpay/utilities/assets.dart';
import 'package:epicpay/utilities/theme/stack_colors.dart';
import 'package:event_bus/event_bus.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_svg/flutter_svg.dart';

import '../../../services/event_bus/events/global/wallet_sync_status_changed_event.dart';
import '../../../services/event_bus/global_event_bus.dart';
import '../../../utilities/constants.dart';
import '../../../utilities/util.dart';
import '../../../widgets/animated_widgets/rotate_icon.dart';

/// [eventBus] should only be set during testing
class WalletRefreshButton extends ConsumerStatefulWidget {
  const WalletRefreshButton({
    super.key,
    required this.walletId,
    required this.initialSyncStatus,
    this.tokenContractAddress,
    this.onPressed,
    this.eventBus,
    this.overrideIconColor,
  });

  final String walletId;
  final WalletSyncStatus initialSyncStatus;
  final String? tokenContractAddress;
  final VoidCallback? onPressed;
  final EventBus? eventBus;
  final Color? overrideIconColor;

  @override
  ConsumerState<WalletRefreshButton> createState() => _RefreshButtonState();
}

class _RefreshButtonState extends ConsumerState<WalletRefreshButton> {
  late final EventBus eventBus;

  late RotateIconController _spinController;

  late StreamSubscription<dynamic> _syncStatusSubscription;

  @override
  void initState() {
    _spinController = RotateIconController();

    eventBus =
        widget.eventBus != null ? widget.eventBus! : GlobalEventBus.instance;

    _syncStatusSubscription =
        eventBus.on<WalletSyncStatusChangedEvent>().listen(
      (event) async {
        if (event.walletId == widget.walletId) {
          switch (event.newStatus) {
            case WalletSyncStatus.unableToSync:
              _spinController.reset?.call();
              break;
            case WalletSyncStatus.synced:
              _spinController.reset?.call();
              break;
            case WalletSyncStatus.syncing:
              _spinController.repeat?.call();
              break;
          }
        }
      },
    );

    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (widget.initialSyncStatus == WalletSyncStatus.syncing) {
        _spinController.repeat?.call();
      }
    });

    super.initState();
  }

  @override
  void dispose() {
    _syncStatusSubscription.cancel();

    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final isDesktop = Util.isDesktop;

    return SizedBox(
      height: isDesktop ? 22 : 36,
      width: isDesktop ? 22 : 36,
      child: Semantics(
        label: "Refresh Button. Refreshes The Values In Summary.",
        excludeSemantics: true,
        child: MaterialButton(
          color: isDesktop
              ? Theme.of(context).extension<StackColors>()!.buttonBackSecondary
              : null,
          splashColor: Theme.of(context).extension<StackColors>()!.highlight,
          onPressed: () {
            if (widget.tokenContractAddress == null) {
              final wallet =
                  (ref.read(walletProvider)!.wallet as EpicCashWallet);
              final isRefreshing = wallet.refreshMutex;
              if (!isRefreshing) {
                _spinController.repeat?.call();
                wallet.refresh().then((_) => _spinController.reset?.call());
              }
            } else {
              if (!(ref.read(walletProvider)!.wallet as EpicCashWallet)
                  .refreshMutex) {
                (ref.read(walletProvider)!.wallet as EpicCashWallet).refresh();
              }
            }
          },
          elevation: 0,
          highlightElevation: 0,
          hoverElevation: 0,
          padding: EdgeInsets.zero,
          materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(
              Constants.size.circularBorderRadius,
            ),
          ),
          child: RotateIcon(
            icon: SvgPicture.asset(
              Assets.svg.arrowRotate,
              width: isDesktop ? 12 : 24,
              height: isDesktop ? 12 : 24,
              color: widget.overrideIconColor != null
                  ? widget.overrideIconColor!
                  : isDesktop
                      ? Theme.of(context)
                          .extension<StackColors>()!
                          .textFieldDefaultSearchIconRight
                      : Theme.of(context).extension<StackColors>()!.switchBGOn,
            ),
            controller: _spinController,
            curve: Curves.easeInOutCirc,
            animationDurationMultiplier: 1.75,
          ),
        ),
      ),
    );
  }
}
